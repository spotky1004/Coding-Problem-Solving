const MAX_LEN = 1000;
const ZER_LEN = 7;
const ONE_LEN = 4;
const TWO_LEN = 7;
const COM_LEN = 6;

const zer = [
  ".####..",
  "##..##.",
  "##..##.",
  "##..##.",
  ".####.."
];
const one = [
  "###.",
  ".##.",
  ".##.",
  ".##.",
  ".##."
];
const two = [
  ".####..",
  "##..##.",
  "...##..",
  ".##....",
  "######."
];
const nine = [
  ".####..",
  "##..##.",
  ".#####.",
  "....##.",
  ".####.."
];
const ls = [ZER_LEN, ONE_LEN, TWO_LEN];
const ns = [zer, one, two, , , , , , , nine];
const com = [
  "......",
  "......",
  "......",
  "##....",
  ".#...."
];

const out = [];
let b;
function reset() {
  b = Array.from({ length: 5 }, () => [""]);
}
function put() {
  out.push(...b.map(v => v.padEnd(MAX_LEN, ".")));
  out.push(".".repeat(MAX_LEN));
  reset();
}
reset();
for (let i = 0; i <= 170; i++) {
  const s = Array.from((2n ** BigInt(i)).toString(3)).reverse();
  const len = s.reduce((a, b) => a + ls[b], 0) + COM_LEN;
  if (b[0].length + len > 1000) put();
  for (const n of s) {
    for (let j = 0; j < 5; j++) {
      b[j] += ns[n][j];
    }
  }
  for (let j = 0; j < 5; j++) {
    b[j] += com[j];
  }
}
b[0] += ".####....";
b[1] += "##..##...";
b[2] += "##..##...";
b[3] += "##..##.##";
b[4] += ".####..##";
put();
out.push(".".repeat(MAX_LEN));

const d = [
  "01020102001020021020001020010200120000120001200102010200120120012001200102012001020102012001020102010102010201200120012012001220100200012002010201020102010200",
  "120012012001200120012001200120012001200120012012001201002000102001201200020020010020102001200001020102000120002010200102020000102001202002102001200202010201",
  "0201020010020201020201020200120010001200201200102012001200120102012002100002010200010200012022020012020102020102020102010909909990999909999902010200120012",
  "0012010201020102012001201201020120102012002001020012001200120012000120012001200210200120000120012001201200120102001001001001010100101000020102010200102001020001"
];
for (let i = 0; i < 4; i++) {
  const s = Array.from(d[i]);
  for (const n of s) {
    for (let j = 0; j < 5; j++) {
      b[j] += ns[n][j];
    }
  }
  put();
}
out.pop();
require("fs").writeFileSync("./out.txt", out.join("\n") + "\n");
